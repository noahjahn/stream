---
import Layout from '../layouts/Layout.astro';
---

<Layout title="P2P screen sharing">
  <main>
    <div>
      <h1 class="text-4xl pb-8 dark:text-white">P2P screen sharing</h1>

      <p class="text-lg py-4 dark:text-white">
        <strong>Instructions for sharing your screen</strong>: Enter the peer
        ID(s) of the person(s) you want to send your stream to, then click the
        "Send Stream" button to start sending your stream. You will be prompted
        which window or screen to share. <i
          >Multiple IDs can be entered, separated by a comma (,)</i
        >
      </p>

      <p class="text-lg py-4 dark:text-white">
        <strong>Instructions for receiving a stream</strong>: You will be
        prompted to accept the incoming stream. Only accept streams from people
        you trust. You <i>do not</i> have to enter a peer ID to receive a stream.
      </p>
    </div>

    <div class="flex flex-col md:flex-row md:space-x-4 max-md:space-y-4 mb-4">
      <div class="w-full md:w-8/12">
        <label
          for="client-peer-id"
          class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
          >Your ID</label
        >
        <input
          id="client-peer-id"
          type="text"
          class="w-full bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          required
          disabled
          autocomplete="off"
        />
      </div>
      <div class="w-full md:w-8/12">
        <label
          for="remote-peer-id"
          class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
          >Peer IDs</label
        >
        <input
          id="remote-peer-id"
          type="text"
          class="w-full bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          required
          autocomplete="off"
        />
      </div>
    </div>
    <div class="w-full md:w-8/12">
      <button
        id="call"
        class="py-1 px-8 m-auto border rounded-lg dark:bg-green-600 dark:border-green-500 dark:text-white"
        >Send stream</button
      >
    </div>
    <video id="video"></video>
  </main>
</Layout>

<script>
  import app from '../services/app';

  const manager = app().setup((mediaStream) => {
    const videoElement = document.getElementById('video') as HTMLMediaElement;

    videoElement.srcObject = mediaStream;
    videoElement.play();
  });

  (document.getElementById('client-peer-id') as HTMLInputElement).value =
    manager.id;

  const debounce = (callback: Function, wait: number) => {
    let timeoutId: number | undefined = undefined;
    return (...args: unknown[]) => {
      window.clearTimeout(timeoutId);
      timeoutId = window.setTimeout(() => {
        callback(...args);
      }, wait);
    };
  };

  async function startCall() {
    try {
      const remotePeerIdElement = document.getElementById(
        'remote-peer-id'
      ) as HTMLInputElement;

      // TODO: this variable is a lie, right now it could be potential peers as well, not just connected peers
      manager.connectedPeers = remotePeerIdElement.value.split(',');

      const captureStream = await navigator.mediaDevices.getDisplayMedia({
        video: {
          displaySurface: 'browser',
        },
      });

      manager.connectedPeers.forEach((peer) => {
        manager.peer?.call(peer, captureStream);
      });

      return captureStream;
    } catch (err) {
      console.error(`Error: ${err}`);
    }
  }

  const startCallWithDebounce = debounce(startCall, 600);

  const callButton = document.getElementById('call');
  callButton?.addEventListener('click', startCallWithDebounce);
</script>
